/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;


import aiproject.PuzzleGeometry;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author skerd
 */
public class MainFrame extends javax.swing.JFrame {


    static AcrossPanel allClues ;
    static public JLabel question;
    static public LoadingPanel loading;
    static public PuzzlePanel pP;

    static public int sec;
    static public int min;
    static public int hours;

    static boolean stopTimer = true;

    public void clearTiles(){
        pP.clearTiles();
    }

    public void fill(int row, int col){
        pP.fill(row, col);
    }


    public void setCluesAndStartPuzzle( ArrayList<Object> across, ArrayList<Object> down, ArrayList<Object> newAcross, ArrayList<Object> newDown, ArrayList<Object> tiles){

        allClues  = new AcrossPanel( across , down , newAcross, newDown);
        System.out.println(tiles.size() + " at main panel !!!!!!!!!!!!!! ");
        pP = new PuzzlePanel( tiles );//this should be inforamtion from the matrix

        JPanel all = new JPanel();
        all.setLayout( new BorderLayout() );

        all.add( pP, BorderLayout.CENTER);
        all.add( allClues, BorderLayout.EAST);

        //showStartDialog();

        this.remove(loading);
        this.add(all, BorderLayout.CENTER);
        this.revalidate();
        this.repaint();

        pP.revealPuzzle();


        //runTimer();

    }

//    public static void runTimer(){
//
//         new Thread(new Runnable() {
//            public void run() {
//
//                sec = 0;
//                min = 0;
//                hours = 0;
//
//                while( stopTimer ){
//
//                    if( sec == 60){
//                        min++;
//                        sec = 0;
//                    }
//
//                    if( min == 60){
//                        hours++;
//                        min = 0;
//                    }
//
//                    try {
//                        System.out.println("CurrentTime: " + hours + ":" + min + ":" + sec);
//                        PuzzlePanel.TimeLabel.setText("Time: " + hours + ":" + min + ":" + sec);
//                        TimeUnit.MILLISECONDS.sleep((long) 1000.0);
//                        sec++;
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(LoadingPanel.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }
//        }).start();
//
//    }
//
    public void showStartDialog(){

        Object[] options = { "OK" };

        int result = JOptionPane.showOptionDialog(null, "Ready to get started?", "Ready?",
                JOptionPane.YES_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, options[0]);
        if (result == 0){
            System.out.println("Starting puzzle now!!");
            PuzzlePanel.erasePuzzle();
        }
    }


    public MainFrame() {

        initComponents();

        new Thread(new Runnable() {
            public void run() {
                System.out.println("Loading screen !");
                loading = new LoadingPanel();
                setLayout(new BorderLayout());
                add(loading, BorderLayout.CENTER);
            }
        }).start();

        new Thread(new Runnable() {
            public void run() {
                PuzzleGeometry getQ = new PuzzleGeometry();
            }
        }).start();


        //setCluesAndStartPuzzle(null, null);

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
