/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.Color;
import aiproject.Cs461;

/**
 *
 * @author skerd
 */
public class Tile extends javax.swing.JPanel {

    /**
     * Creates new form Tile
     */
    private int tileNumber ;
    private String tileLetter;
    private int row;
    private int col;
    private boolean enabled;
    private boolean revealed;
    private String correctLetter;
    private String tileNumberString;
    
    public Tile(int tileNumber, String tileLetter, int row, int col, boolean enabled, String correctLetter) {
        this.tileNumber = tileNumber;
        this.tileLetter = tileLetter;
        this.row = row;
        this.col = col;
        this.enabled = enabled;
        this.correctLetter = correctLetter;
        
        if( tileNumber == -1){
            tileNumberString = " ";
        }
        else{
            tileNumberString = this.tileNumber + "";
        }
        
        initComponents();
        
        if( !this.enabled ){
            this.setBackground(StaticVars.disabled);
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RevealedLabel = new javax.swing.JLabel();
        TileNumber = new javax.swing.JLabel();
        TileLetter = new javax.swing.JLabel();

        RevealedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RevealedLabel.setEnabled(false);

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        setDoubleBuffered(false);
        setMaximumSize(new java.awt.Dimension(75, 75));
        setMinimumSize(new java.awt.Dimension(75, 75));
        setPreferredSize(new java.awt.Dimension(75, 75));
        setRequestFocusEnabled(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        TileNumber.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        TileNumber.setText(tileNumberString + ""
        );

        TileLetter.setFont(new java.awt.Font("Dialog", 1, 80)); // NOI18N
        TileLetter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TileLetter.setText(tileLetter);
        TileLetter.setAlignmentY(0.0F);
        TileLetter.setIconTextGap(0);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TileLetter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TileNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TileLetter, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        selectTile(this.row, this.col);
    }//GEN-LAST:event_formMouseClicked

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        
        if( enabled ){
            String letterPressed =  evt.getKeyText((Integer) evt.getKeyCode() );
            if( letterPressed.length() <= 1){
                System.out.println("Pressed: '" + letterPressed + "' at tile: [" + this.row + "," + this.col + "]." );
                
                if( !isRevealed() ){
                    this.tileLetter =  letterPressed ;
                    this.TileLetter.setText(this.tileLetter);
                }
                
                selectNextTile(this.row, this.col);
                PuzzlePanel.isPuzzleComplete();
            }
        }
      
    }//GEN-LAST:event_formKeyReleased
    
    public void selectTile( int row, int col ){
        
        Tile temp = PuzzlePanel.tileArray[row][col];
        
        if( temp.isTileEnabled() ){
            
            temp.requestFocus();
            temp.grabFocus();
            
            Cs461.main.clearTiles();
            Cs461.main.fill(temp.row, temp.col);
            
            PuzzlePanel.lastRow = temp.row;
            PuzzlePanel.lastCol = temp.col;
            
            int questionId = getBelongingQuestion( PuzzlePanel.direction );

            String wordDirection = "";
            if( PuzzlePanel.direction.equals("A") )
                wordDirection = "Across";
            else{
                wordDirection = "Down";
            }
            
            AcrossPanel.selectQuestionInTable(questionId, PuzzlePanel.direction);

            System.out.println("Clicked Tile: [" + temp.row + "," + temp.col + "]. HasFocus: [" + temp.hasFocus() + "] and belongs to question: [" + questionId + "] with [" + wordDirection + "] alignment" );
            
        }
        else{
            System.out.println("The tile is not enabled!");
        }
        
    }
    
    private void selectNextTile(int row, int col){
        
        if( PuzzlePanel.direction.equals("A")){
            int i = 1;
            int colTemp = (col + 1) % 5  ;
            while(  i <= 5 ){
                if( PuzzlePanel.tileArray[row][colTemp].isTileEnabled() ){
                    selectTile(row,colTemp);
                    break;
                }
                colTemp = (colTemp + 1) % 5  ;
                i++;
            }
        }
        else{
            int i = 1;
            int rowTemp = (row + 1) % 5  ;
            while(  i <= 5 ){
                if( PuzzlePanel.tileArray[rowTemp][col].isTileEnabled() ){
                    selectTile(rowTemp,col);
                    break;
                }
                rowTemp = (rowTemp + 1) % 5  ;
                i++;
            }
        }
    }
    
    private int getBelongingQuestion( String direction ){
        if( direction.equals("A")){
            for( int i = 0; i < 5; i++){

                int questionNr = PuzzlePanel.tileArray[ this.row ][i].getTileNumber();
                if( questionNr != -1  ){
                    return questionNr;
                }
            }   
        }
        else if( direction.equals("D")){
            
            for( int i = 0; i < 5; i++){
                int questionNr = PuzzlePanel.tileArray[i][ this.col ].getTileNumber();
                if( questionNr != -1  ){
                    return questionNr;
                }
            }  
        }
        return -1;
    }
    
    public int getTileNumber(){
        return this.tileNumber;
    }
    
    public int getTileRow(){
        return this.row;
    }
    
    public int getTileCol(){
        return this.col;
    }
    
    private String getLetter(){
        return this.tileLetter;
    }
    
    private String getCorrectLetter(){
        return this.correctLetter;
    }
    
    public boolean isTileCorrect(){
        if( getLetter().equals( getCorrectLetter() ) ){
            //System.out.println("Tile correct: [" + this.row + "," + this.col + "] has letter: [" + getLetter() +"] and correctLetter: [" + getCorrectLetter() + "]");
            return true;
        }
        else{
            //System.out.println("Tile wrong: [" + this.row + "," + this.col + "] has letter: [" + getLetter() +"] and correctLetter: [" + getCorrectLetter() + "]");
            return false;
        }
    }
    
    public boolean isTileEnabled(){
        return this.enabled;
    }

    public boolean isRevealed(){
        return this.revealed;
    }
    
    public void clearTile(){
        if( !isRevealed() ){
            this.tileLetter = "";
            this.TileLetter.setText("");
        }
    }
    
    public void hardClearTile(){
        this.tileLetter = "";
        this.TileLetter.setText("");
        this.revealed = false;
        this.RevealedLabel.setText("");
        this.TileLetter.setForeground(Color.black);
    }
    
    public void revealTile(){
        
        if( isTileEnabled() ){
            this.tileLetter = this.correctLetter;
            this.TileLetter.setText(correctLetter);
            this.TileLetter.setForeground(StaticVars.revealed);
            this.RevealedLabel.setText("R");
            this.revealed = true;
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RevealedLabel;
    private javax.swing.JLabel TileLetter;
    private javax.swing.JLabel TileNumber;
    // End of variables declaration//GEN-END:variables
}
